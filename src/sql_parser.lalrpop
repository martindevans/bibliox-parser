use std::str::FromStr;

use ast;
use ast::{
    Statement,
    StatementBody,
    TableName,
    ColumnDefinition,
    Type,
    ColumnConstraint,
    ColumnConstraintType,
    ConflictClause,
    PrimaryKeyConstraint,
    CollateFunction,
	ForeignKeyClause,
    ForeignKeyDeferrable,
    DeferMode,
    TransactionMode
};

grammar;

//Macros
//Parse a comma separated list with an optional trailing comma
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

//Basics
SignedInteger: i32 = {
    r"(-|\+)?[0-9]+" => i32::from_str(<>).unwrap()
};

// Core parts
pub TableName: TableName<'input> = {
    <schema:(<SchemaName> ".")?> <name:r"[a-zA-Z]+"> => TableName { schema_name: schema, name: name }
};

pub ColumnName: &'input str = {
    <name:r"[a-zA-Z]+"> => name
};

pub SavepointName: &'input str = {
    <name:r"[a-zA-Z]+"> => name
};

pub SchemaName: &'input str = {
    <name:r"[a-zA-Z]+"> => name
};

pub SortOrder: bool = {
    "ASC" => true,
    "DESC" => false,
};

pub AutoIncrement: () = {
    "AUTOINCREMENT" => (),
};

pub ConflictClause: ConflictClause = {
    "ON CONFLICT ROLLBACK" => ConflictClause::Rollback,
    "ON CONFLICT ABORT" => ConflictClause::Abort,
    "ON CONFLICT FAIL" => ConflictClause::Fail,
    "ON CONFLICT IGNORE" => ConflictClause::Ignore,
    "ON CONFLICT REPLACE" => ConflictClause::Replace,
};

pub CollateFunction: CollateFunction = {
    "BINARY" => CollateFunction::Binary,
    "NOCASE" => CollateFunction::NoCase,
    "RTRIM" => CollateFunction::RightTrim,
};

pub ColumnConstraintBody: ColumnConstraintType<'input> = {
    "PRIMARY KEY" <s:SortOrder?> <c:ConflictClause?> <a:AutoIncrement?> => ColumnConstraintType::PrimaryKey(PrimaryKeyConstraint { ascending: s, conflict: c, auto_increment: a.is_some() }),
    "NOT NULL" <c:ConflictClause?> => ColumnConstraintType::NotNull(c),
    "UNIQUE" <c:ConflictClause?> => ColumnConstraintType::Unique(c),
    //todo: "CHECK"
    //todo: "DEFAULT"
    "COLLATE" <c:CollateFunction> => ColumnConstraintType::Collate(c),
	<f:ForeignKeyClause> => ColumnConstraintType::Foreign(f),
};

pub Not: () = {
    "NOT" => (),
};

pub DeferrableClause: ForeignKeyDeferrable = {
    <n:Not?> "DEFERRABLE INITIALLY DEFERRED" => ForeignKeyDeferrable { deferrable: n.is_none(), initial: Some(DeferMode::Deferred) },
    <n:Not?> "DEFERRABLE INITIALLY IMMEDIATE" => ForeignKeyDeferrable { deferrable: n.is_none(), initial: Some(DeferMode::Immediate) },
    <n:Not?> "DEFERRABLE" => ForeignKeyDeferrable { deferrable: n.is_none(), initial: None },
};

pub ForeignKeyClause: ForeignKeyClause<'input> = {
	"REFERENCES" <t:TableName> <c:("(" <Comma<ColumnName>> ")")?>
    <d:DeferrableClause?>
    => ForeignKeyClause { table: t, columns: c, deferrable: d }
};

pub ColumnConstraint: ColumnConstraint<'input> = {
    <name:("CONSTRAINT" <r"[a-zA-Z]+">)?> <b:ColumnConstraintBody> => ColumnConstraint { name: name, constraint: b }
};

pub ColumnDefinition: ColumnDefinition<'input> = {
    <name:ColumnName> <t:Type?> <c:ColumnConstraint*> => ColumnDefinition { name: name, type_def: t, constraints: c }
};

pub TypeName: &'input str = {
    <name:r"[a-zA-Z]+"> => name
};

pub Type: Type<'input> = {
    <name:TypeName> => Type { name: name, num1: None, num2: None },
    <name:TypeName> "(" <n1:SignedInteger> ")" => Type { name: name, num1: Some(n1), num2: None },
    <name:TypeName> "(" <n1:SignedInteger> "," <n2:SignedInteger> ")" => Type { name: name, num1: Some(n1), num2: Some(n2) },
};

pub SavePointBody: StatementBody<'input>  = {
    "SAVEPOINT" <s:SavepointName> => StatementBody::Savepoint(s)
};

pub ReleaseBody: StatementBody<'input>  = {
    "RELEASE" "SAVEPOINT"? <s:SavepointName> => StatementBody::Release(s)
};

pub RollbackBody: StatementBody<'input>  = {
    "ROLLBACK" "TRANSACTION"? => StatementBody::Rollback(None),
    "ROLLBACK" "TRANSACTION"? "TO" "SAVEPOINT"? <s:SavepointName> => StatementBody::Rollback(Some(s))
};

pub CommitBody: StatementBody<'input>  = {
    "COMMIT" "TRANSACTION"? => StatementBody::Commit,
    "END" "TRANSACTION"? => StatementBody::Commit
};

pub BeginBody: StatementBody<'input>  = {
    "BEGIN" "TRANSACTION"? => StatementBody::Begin(None),
    "BEGIN" "DEFERRED" "TRANSACTION"? => StatementBody::Begin(Some(TransactionMode::Deferred)),
    "BEGIN" "IMMEDIATE" "TRANSACTION"? => StatementBody::Begin(Some(TransactionMode::Immediate)),
    "BEGIN" "EXCLUSIVE" "TRANSACTION"? => StatementBody::Begin(Some(TransactionMode::Exclusive)),
};

pub DetachBody: StatementBody<'input>  = {
    "DETACH" "DATABASE"? <s:SchemaName> => StatementBody::Detach(s)
};

// Root of parsing!
// https://www.sqlite.org/syntax/sql-stmt.html
pub Statement: Statement<'input> = {
    <b:StatementBody> => Statement::Plain(b),
    "EXPLAIN" <b:StatementBody> => Statement::Explain(b),
    "EXPLAIN QUERY PLAN" <b:StatementBody> => Statement::ExplainQueryPlan(b),
};

pub StatementBody: StatementBody<'input> = {
    <a:AlterTableStatementBody> => a,
    "VACUUM" => StatementBody::Vacuum,
    <s:SavePointBody> => s,
    <r:ReleaseBody> => r,
    <r:RollbackBody> => r,
    <c:CommitBody> => c,
    <b:BeginBody> => b,
    <d:DetachBody> => d
};

pub AlterTableStatementBody: StatementBody<'input> = {
    "ALTER TABLE" <t1:TableName> "RENAME TO" <t2:TableName> => StatementBody::AlterTableRenameTo(t1, t2),
    "ALTER TABLE" <t:TableName> "ADD COLUMN" <c:ColumnDefinition> => StatementBody::AlterTableAddColumn(t, c),
};
